{"version":3,"sources":["components/Note.js","App.js","index.js"],"names":["Note","note","content","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","notesToShow","filter","important","onClick","map","key","id","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kLAMeA,EAJF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OAAO,4BAAKA,EAAKC,UC8CJC,EA9CH,SAACC,GAAW,IAAD,EACKC,mBAASD,EAAME,OADpB,mBACdA,EADc,KACPC,EADO,OAESF,mBAAS,iBAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,KAqBfC,EAAcF,EAChBJ,EACAA,EAAMO,QAAO,SAAAZ,GAAI,OAAuB,IAAnBA,EAAKa,aAE9B,OACE,6BACE,qCACA,6BACE,4BAAQC,QAAS,kBAAMJ,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGE,EAAYI,KAAI,SAACf,GAAD,OACf,kBAAC,EAAD,CAAMgB,IAAKhB,EAAKiB,GAAIjB,KAAMA,QAG9B,0BAAMkB,SAjCY,SAACC,GACrBA,EAAMC,iBACN,IAAMC,EAAa,CACjBpB,QAASM,EACTe,MAAM,IAAIC,MAAOC,cACjBX,UAAWY,KAAKC,SAAW,GAC3BT,GAAIZ,EAAMsB,OAAS,GAErBrB,EAASD,EAAMuB,OAAOP,IACtBb,EAAW,MAyBP,2BAAOqB,MAAOtB,EAASuB,SAtBJ,SAACX,GACxBX,EAAWW,EAAMY,OAAOF,UAsBpB,4BAAQG,KAAK,UAAb,WClBRC,IAASC,OACP,kBAAC,EAAD,CAAK7B,MAtBO,CACZ,CACEY,GAAI,EACJhB,QAAS,eACTqB,KAAM,2BACNT,WAAW,GAEb,CACEI,GAAI,EACJhB,QAAS,sCACTqB,KAAM,2BACNT,WAAW,GAEb,CACEI,GAAI,EACJhB,QAAS,+DACTqB,KAAM,2BACNT,WAAW,MAMbsB,SAASC,eAAe,W","file":"static/js/main.a78db08b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note }) => {\n  return <li>{note.content}</li>;\n};\n\nexport default Note","import React, {useState} from 'react'\nimport Note from './components/Note'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState(props.notes);\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n\n  const handleAddNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n    setNotes(notes.concat(noteObject));\n    setNewNote('');\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note key={note.id} note={note} />\n        ))}\n      </ul>\n      <form onSubmit={handleAddNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\n\nconst notes = [\n  {\n    id: 1,\n    content: \"HTML is easy\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  },\n  {\n    id: 2,\n    content: \"Browser can execute only Javascript\",\n    date: \"2019-05-30T18:39:34.091Z\",\n    important: false,\n  },\n  {\n    id: 3,\n    content: \"GET and POST are the most important methods of HTTP protocol\",\n    date: \"2019-05-30T19:20:14.298Z\",\n    important: true,\n  },\n];\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}